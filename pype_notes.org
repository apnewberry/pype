#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC


* TODO Use =parso= instead of =tokenize=
* TODO Consider =concurrent.futures=,
* TODO Consider async, perhaps twisted/trio
#+BEGIN_SRC shell
python -c 'from pprint import pprint; import pype.testing.client; pprint(list(pype.testing.client.get_many([f"http://localhost:8080/{i}" for i in range(5)])))'

#+END_SRC

#+RESULTS:
: ['Hello, 0. You are client number 1065 for this server.',
:  'Hello, 1. You are client number 1065 for this server.',
:  'Hello, 2. You are client number 1065 for this server.',
:  'Hello, 3. You are client number 1065 for this server.',
:  'Hello, 4. You are client number 1065 for this server.']


#+BEGIN_SRC shell
pype ' str.split || tmp_client.get_many || list || pprint.pprint  ' < pype/testing/data/inline_urls.txt
#+END_SRC

#+RESULTS:
#+begin_example
['Hello, a. You are client number 1088 for this server.',
 'Hello, bb. You are client number 1088 for this server.',
 'Hello, ccc. You are client number 1088 for this server.']

['Hello, a. You are client number 1091 for this server.',
 'Hello, bb. You are client number 1091 for this server.',
 'Hello, ccc. You are client number 1091 for this server.']

['Hello, a. You are client number 1094 for this server.',
 'Hello, bb. You are client number 1094 for this server.',
 'Hello, ccc. You are client number 1094 for this server.']

['Hello, a. You are client number 1097 for this server.',
 'Hello, bb. You are client number 1097 for this server.',
 'Hello, ccc. You are client number 1097 for this server.']
#+end_example


#+BEGIN_SRC shell
pype --async ' str.split || tmp_client.get_many || list || pprint.pprint  ' < pype/testing/data/inline_urls.txt
#+END_SRC

** async pype notes

#+BEGIN_SRC python
from pprint import pprint
import inspect
from io import BytesIO

from twisted.internet import reactor
from twisted.web.client import Agent, readBody
from twisted.web.http_headers import Headers

from twisted.web.client import FileBodyProducer


def cbResponse(response):
    d = readBody(response)
    d.addCallbacks(bytes.decode, lambda x: print('Error', x))
    d.addCallbacks(pprint, lambda x: print('Error', x))

    return d


def cbShutdown(ignored):
    reactor.stop()


def request(agent, i, body):
    url = b'http://localhost:8080/' + str(i).encode('utf-8')
    d = agent.request(
        b'GET',
        url,
        Headers({
            b'User-Agent': [b'Twisted Web Client Example'],
            b'Content-Type': [b'text/x-greeting'],
        }, ),
        body,
    )
    d.addCallbacks(cbResponse, lambda x: print('Error', x))


def main():
    agent = Agent(reactor)

    for i in range(10):
        body = FileBodyProducer(BytesIO(b"hello, world"))
        request(agent, i, body)

    reactor.run()


main()

#+END_SRC

#+BEGIN_SRC ipython
'Hello, 0. You are client number 141 for this server.'
'Hello, 1. You are client number 141 for this server.'
'Hello, 4. You are client number 141 for this server.'
'Hello, 2. You are client number 141 for this server.'
'Hello, 5. You are client number 141 for this server.'
'Hello, 6. You are client number 141 for this server.'
'Hello, 3. You are client number 141 for this server.'
'Hello, 7. You are client number 141 for this server.'
'Hello, 8. You are client number 141 for this server.'
'Hello, 9. You are client number 141 for this server.'

#+END_SRC

** Async-main

#+BEGIN_SRC shell
pype --async ' str.upper || ?.rstrip()  || treq.get || treq.text_content ' max 're.search(r"(\d+)", ?) || ?.group(1) || int || pprint.pprint' <<EOF
http://localhost:8080/a1
http://localhost:8080/a2
EOF
about to run reactor
2
[<Deferred at 0x7fa9b26f9358 current result: None>]

#+END_SRC


#+BEGIN_SRC shell
pype --async ' str.upper || ?.rstrip()  || treq.get || treq.text_content  '  max < urls.txt
about to run reactor
['Hello, REQUESTER_300. You are client number 33797 for this server.']

#+END_SRC

#+BEGIN_SRC shell
 pype --async ' str.upper || ?.rstrip()  || treq.get || treq.text_content ' <<EOFhttp://localhost:8080/a1
http://localhost:8080/a2
EOF

about to run reactor
[(True, 'Hello, A1. You are client number 34399 for this server.'), (True, 'Hello, A2. You are client number 34399 for this server.')]

#+END_SRC


* TODO Fix quote syntax

** TODO Use =parso=.


** Quoting approaches

#+BEGIN_SRC ipython
"""

$ echo 'a.b.c' | pype 'str.replace(?, ".", "!")'
a!b!c

"""

import sys

import click


def parse_command(command):
    fnstr = 'lambda placeholder: ' + command.replace('?', 'placeholder')
    return eval(fnstr)


def main(in_stream, command):
    process = parse_command(command)
    for line in in_stream:
        yield process(line)


@click.command()
@click.option('--import', '-i', 'import_')
@click.argument('command')
@click.argument('in_stream', default=click.get_text_stream('stdin'))
def cli(import_, command, in_stream):

    gen = main(in_stream, command)
    for line in gen:
        print(line)


cli()
#+END_SRC

** Two =eval()= calls
#+BEGIN_SRC python

def do(command, data):
    a = 'lambda PLACEHOLDER: command.replace("?", PLACEHOLDER)'
    b = eval(a, {'command': command})
    c = b(data)
    d = eval(c)
    return d
print(do('str.upper("?")', 'xyz') == 'XYZ')
print(do('str.upper(?)', 'xyz') == 'XYZ')
#+END_SRC

#+RESULTS:
: True
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/tmp/babel-31866NJj/python-31866KrV", line 9, in <module>
:     print(do('str.upper(?)', 'xyz') == 'XYZ')
:   File "/tmp/babel-31866NJj/python-31866KrV", line 6, in do
:     d = eval(c)
:   File "<string>", line 1, in <module>
: NameError: name 'xyz' is not defined

** Two =eval()= calls with local data
#+BEGIN_SRC python
def do(command, data):
    a = 'lambda PLACEHOLDER: command.replace("?", PLACEHOLDER)'
    b = eval(a, {'command': command})
    c = b(data)
    d = eval(c, {data:data})
    return d
print(do('str.upper("?")', 'xyz'))
print(do('str.upper(?)', 'xyz'))

#+END_SRC

#+RESULTS:
: XYZ
: XYZ

** Two =eval= calls other way around

#+BEGIN_SRC python
from pprint import pprint as pp
def do(command, data):
    a = """lambda PLACEHOLDER: 'command.replace("?", PLACEHOLDER)'"""
    b = eval(a, {'command': command})
    c = b(data)
    d = eval(c, {'PLACEHOLDER': data, 'command': command})
    e = eval(d)
    pp(locals())
    return e
print(do('str.upper("?")', 'xyz'))


#+END_SRC

#+RESULTS:
: {'a': 'lambda PLACEHOLDER: \'command.replace("?", PLACEHOLDER)\'',
:  'b': <function <lambda> at 0x7f3ed6a92ea0>,
:  'c': 'command.replace("?", PLACEHOLDER)',
:  'command': 'str.upper("?")',
:  'd': 'str.upper("xyz")',
:  'data': 'xyz',
:  'e': 'XYZ'}
: XYZ

** One call


#+BEGIN_SRC python
from pprint import pprint as pp
def do(command, data):
    a = command.replace('?', data)
    b = eval(a, {})
    pp(locals())
    return b
print(do("""str.upper('?')""", 'xyz'))


#+END_SRC

#+RESULTS:
: {'a': "str.upper('xyz')",
:  'b': 'XYZ',
:  'command': "str.upper('?')",
:  'data': 'xyz'}
: XYZ

** fstrings

#+BEGIN_SRC shell
printf Bob | pype $'f"I said, \'hello, {?}\'".lower()'
#+END_SRC

#+RESULTS:
: i said, 'hello, bob'



* TODO Add setup and teardown
Possibly with =exec=
* TODO Remove this =f'{_PYPE_VALUE}'=
* Maybe single-line inputs shouldn't get a newline
* TODO Use True/False instead of yes/no in main()
* Quoting notes

# import ast
# from inspect import getmembers

# import parso
# from astpp import parseprint

# class RewriteName(ast.NodeTransformer):
#     def visit_Name(self, node):
#         return ast.copy_location(ast.Name(id='data', ctx=ast.Load()), node)

# s = 'print(1 + a)'
# tree = ast.parse(s)
# parseprint(tree)

# out = RewriteName().visit(tree)

# # parseprint(out)

# def show(x):
#     return dict(getmembers(x))

# ptree = parso.parse('100 + 5000 + ? + 8 + 9')
# show(ptree)

command = 'str.upper(?)'
ls = ('lambda _PYPE_PLACEHOLDER_: ' + command.replace('?', '_PYPE_PLACEHOLDER'))
ls2 = 'lambda _PYPE_PLACEHOLDER_: str.upper(_PYPE_PLACEHOLDER)'

ls
eval(ls, {'_PYPE_PLACEHOLDER': 'a'})("b")

# import ast
# from inspect import getmembers

# import parso
# from astpp import parseprint

# class RewriteName(ast.NodeTransformer):
#     def visit_Name(self, node):
#         return ast.copy_location(ast.Name(id='data', ctx=ast.Load()), node)

# s = 'print(1 + a)'
# tree = ast.parse(s)
# parseprint(tree)

# out = RewriteName().visit(tree)

# # parseprint(out)

# def show(x):
#     return dict(getmembers(x))

# ptree = parso.parse('100 + 5000 + ? + 8 + 9')
# show(ptree)
# 111111111111111111111111111111111111111111111111111111111111111111111111111111111111
command = 'str.upper("?")'
ls = ('lambda _PYPE_PLACEHOLDER: ' + command.replace('?', '_PYPE_PLACEHOLDER'))
ls
eval(ls, {'_PYPE_PLACEHOLDER': 'a'})("b")

command = 'str.upper("?")'
ls2 = 'lambda _PYPE_PLACEHOLDER: command.replace("?", _PYPE_PLACEHOLDER)'
ls2_result = eval(ls2, {'command': command})('b')
eval(ls2_result)


def do(command, data):
    a = 'lambda PLACEHOLDER: command.replace("?", PLACEHOLDER)'
    b = eval(a, {'command': command})
    c = b(data)
    d = eval(c)
    return d


do('str.upper("?")', 'xyz') == 'XYZ'

from pype.app import _string_to_tokens

s = """f'abc{?}'"""
t = _string_to_tokens(s)
list(t)
* Async notes :notes:

#+BEGIN_SRC python
print(1)
5
#+END_SRC
